// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole   @default(USER)
  accounts          Account[]
  sessions          Session[]
  // categoriesCreated Category[] @relation("CreatedCategories")
  // categoriesUpdated Category[] @relation("UpdatedCategories")
  sizesCreated      Size[]     @relation("CreatedSizes")
  sizesUpdated      Size[]     @relation("UpdatedSizes")
  Product           Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id             String  @id @default(cuid())
  title          String
  desc           String
  img            String?
  slug           String  @unique
  // createdUserId  String
  // updatedUserId  String?
  parentId       String?
  isMainCategory Boolean @default(false)

  //time stamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //----
  // RELATIONS
  //----
  // move created user and updated user to audit log
  // createdUser   User       @relation("CreatedCategories", fields: [createdUserId], references: [id])
  // updatedUser   User?      @relation("UpdatedCategories", fields: [updatedUserId], references: [id])
  parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
  subCategories Category[] @relation("Subcategories")
  products      Product[]
}

model Size {
  id            String   @id @default(cuid())
  value         String
  name          String
  createdUser   User     @relation("CreatedSizes", fields: [createdUserId], references: [id])
  createdUserId String //fk user id
  updatedUser   User?    @relation("UpdatedSizes", fields: [updatedUserId], references: [id])
  updatedUserId String? //fk user id
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id         String   @id @default(cuid())
  title      String
  desc       String
  slug       String   @unique
  price      Decimal //29.00
  isFeatured Boolean  @default(false)
  user       User     @relation(fields: [createdBy], references: [id])
  createdBy  String //fk user id 
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String // fk category 
  images     Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  productId String //fk product 
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
