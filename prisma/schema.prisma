// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  sessions      Session[]
  Category      Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  title     String
  desc      String
  img       String?
  slug      String    @unique
  products  Product[]
  creatorId String //fk user id 
  user      User      @relation(fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id         String   @id @default(cuid())
  title      String
  desc       String
  img        String[]
  slug       String   @unique
  price      Decimal //29.00
  isFeatured Boolean  @default(false)
  categoryId String // fk category 
  category   Category @relation(fields: [categoryId], references: [id])
  images     Image[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String //fk product 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
